{"version":3,"sources":["components/drugCard.js","views/Dashboard.js","views/DrugScreen.js","components/BasicLayout.js","App.js","serviceWorker.js","index.js"],"names":["DrugCard","this","props","dosage","react_default","a","createElement","rate","className","Card_default","style","width","height","Title","backgroundColor","color","drugName","Body","getDosage","dosageUnit","getRate","rateUnit","Component","Dashboard","state","arr","i","data","length","push","components_drugCard","key","location","method","makeCards","App","react_router_dom","basename","process","react_router","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qlFAuDeA,iOA7CX,OAA0B,OAAtBC,KAAKC,MAAMC,OACNC,EAAAC,EAAAC,cAAA,cAASL,KAAKC,MAAMC,QAEpBF,KAAKC,MAAMC,yCAKpB,OAA0B,OAAtBF,KAAKC,MAAMC,OACNC,EAAAC,EAAAC,cAAA,cAASL,KAAKC,MAAMK,MAEpBN,KAAKC,MAAMK,sCAKpB,OACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAMK,MAAO,CAAEC,MAAO,QAASC,OAAQ,UACrCR,EAAAC,EAAAC,cAACG,EAAAJ,EAAKQ,MAAN,CAAYH,MAAO,CAAEI,gBAAiB,IAAMb,KAAKC,MAAMa,QACrDX,EAAAC,EAAAC,cAAA,SAAIL,KAAKC,MAAMc,WAEjBZ,EAAAC,EAAAC,cAACG,EAAAJ,EAAKY,KAAN,KACEb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACZP,KAAKiB,YAENd,EAAAC,EAAAC,cAAA,UAAKL,KAAKC,MAAMiB,aAGlBf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACZP,KAAKmB,UAENhB,EAAAC,EAAAC,cAAA,UAAKL,KAAKC,MAAMmB,YAIpBjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAf,oBAxCWc,6BCmBRC,6MAXXC,MAAQ,8EAPJ,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIC,EAAKC,OAAQF,IAC7BD,EAAII,KAAKzB,EAAAC,EAAAC,cAAEwB,EAAF,CAAWC,IAAKL,EAAGV,SAAUW,EAAKD,GAAG,aAAcvB,OAAQwB,EAAKD,GAAL,OAAmBP,WAAYQ,EAAKD,GAAG,eAAgBnB,KAAMoB,EAAKD,GAAL,KAAiBL,SAAUM,EAAKD,GAAG,aAAcM,SAAUL,EAAKD,GAAL,MAAmBC,EAAKD,GAAL,KAAiBX,MAAOY,EAAKD,GAAG,mBAAoBO,OAAQN,EAAKD,GAAL,UAG/Q,OAAOD,mCAKP,OACIrB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACVP,KAAKiC,oBAdEZ,uCCACA,4BCFCA,kBCsBXa,MAhBf,WACE,OACE/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAeC,SAAUC,iBACvBlC,EAAAC,EAAAC,cAAA,WAKEF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,QCNvBoB,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a8484c80.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport \"../styles/drugCard.css\";\n\n//still needs to reaspond to specific drug information\n//Whole div is link, it should just be the drug card alone\n\nclass DrugCard extends Component {\n  getColor() {}\n  getDosage() {\n    if (this.props.dosage !== null) {\n      return <strong>{this.props.dosage}</strong>;\n    } else {\n      return this.props.dosage;\n    }\n  }\n\n  getRate() {\n    if (this.props.dosage === null) {\n      return <strong>{this.props.rate}</strong>;\n    } else {\n      return this.props.rate;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"cardContainer\">\n        <Card style={{ width: \"18rem\", height: \"11rem\" }}>\n          <Card.Title style={{ backgroundColor: \"#\" + this.props.color }}>\n            <p>{this.props.drugName}</p>\n          </Card.Title>\n          <Card.Body>\n            <div className=\"info\">\n              <div className=\"dosage\">\n                {this.getDosage()}\n                {/* {this.props.dosage} */}\n                <h5>{this.props.dosageUnit}</h5>\n              </div>\n\n              <div className=\"rate\">\n                {this.getRate()}\n                {/* {this.props.rate} */}\n                <h5>{this.props.rateUnit}</h5>\n              </div>\n            </div>\n\n            <div className=\"status\">Active</div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default DrugCard;\n","import React, { Component } from 'react';\nimport DrugCard from '../components/drugCard';\nimport '../styles/dashboard.css';\nimport data from \"../data/drugData.json\";\n\nclass Dashboard extends Component {\n    makeCards() {\n        var arr = []\n        for (var i = 0; i < data.length; i++) {\n            arr.push(< DrugCard key={i} drugName={data[i][\"Drug Name\"]} dosage={data[i][\"Dosage\"]} dosageUnit={data[i][\"Dosage Unit\"]} rate={data[i][\"Rate\"]} rateUnit={data[i][\"Rate Unit\"]} location={data[i][\"Brain\"] + data[i][\"Pump\"]} color={data[i][\"Drug Color Code\"]} method={data[i][\"Method\"]} />)\n            //if statement to get relevant information\n        }\n        return arr;\n    }\n\n    state = {}\n    render() {\n        return (\n            <div className='dashboard'>\n                {this.makeCards()}\n            </div>\n\n        );\n    }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport '../styles/drugScreen.css';\n\n//still needs to be made to respond to specific drug information\nclass DrugScreen extends Component {\n    state = {}\n    render() {\n        return (\n            <div className=\"drugScreen\">\n                <div className='drugList'>\n                    <ListGroup>\n                        <ListGroup.Item variant='success' action> Drug 1</ListGroup.Item>\n                        <ListGroup.Item variant='success' action> Drug 2</ListGroup.Item>\n                        <ListGroup.Item variant='warning' action> Drug 3</ListGroup.Item>\n                        <ListGroup.Item variant='danger' action> Drug 4</ListGroup.Item>\n                        <ListGroup.Item variant='warning' action> Drug 5</ListGroup.Item>\n                        <ListGroup.Item variant='success' action> Drug 6</ListGroup.Item>\n                        <ListGroup.Item variant='success' action> Drug 7</ListGroup.Item>\n                    </ListGroup>\n                </div>\n\n                {/* <div className='drugInfo'> */}\n                <div className='drugLocation'>\n                    <b>1C</b>\n                </div>\n\n                <div className='drugInfo'>\n                    <div className='drugLabel'>\n                        <b>Milrinone</b>\n                    </div>\n\n                    <div className='drugCalcs'>\n                        <div className=\"dosage\">\n                            <b>0.05</b>\n                            <br />\n                            mcg/kg/hr\n                        </div>\n\n                        <div className=\"rate\">\n                            <b>0.10</b>\n                            <br />\n                            mL/hr\n                        </div>\n                    </div>\n                </div>\n\n                <div className='drugBar'>\n\n                    {/* </div> */}\n\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default DrugScreen;","import React, { Component } from \"react\";\nimport GridLayout from \"react-grid-layout\";\n\nclass BasicLayout extends Component {\n  render() {\n    // layout is an array of objects, see the demo for more complete usage\n    var layout = [\n      { i: \"a\", x: 0, y: 0, w: 1, h: 2, static: true },\n      { i: \"b\", x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 },\n      { i: \"c\", x: 4, y: 0, w: 1, h: 2 }\n    ];\n    return (\n      <GridLayout\n        className=\"layout\"\n        layout={layout}\n        cols={12}\n        rowHeight={30}\n        width={1200}\n      >\n        <div key=\"a\">a</div>\n        <div key=\"b\">b</div>\n        <div key=\"c\">c</div>\n      </GridLayout>\n    );\n  }\n}\n\nexport default BasicLayout;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Dashboard from \"./views/Dashboard\";\nimport DrugScreen from \"./views/DrugScreen\";\nimport BasicLayout from \"./components/BasicLayout\";\n// import TopHeader from '../components/topHeader';\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div>\n          {/*This component being called in router means that it will always be on all of the pages.  Makes things a lot easier.*/}\n\n          {/* <TopHeader /> */}\n\n          <Route exact path=\"/\" component={Dashboard} />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}